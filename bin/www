#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('babel-core/register');
require("babel-polyfill");
const cluster = require('cluster');
const numCPUs = require('os').cpus().length;

const app = require('../app');
const debug = require('debug')('demo:server');
const http = require('http');
const logger = require('../lib/logger');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || 8080);
const env = process.env.NODE_ENV || app.env;
// app.set('port', port);
/**
 * Create HTTP server.
 */
if (cluster.isMaster) {
  let msg = `Master: ${process.pid} is running. In ${env} mode, on port ${port}`;
  console.log(msg);
  logger.app.info(msg);
  // Fork workers.
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('exit', (worker, code, signal) => {
    logger.app.info(`Worker: ${worker.process.pid} died`);
  });
} else {

  var server = http.createServer(app.callback());
  let msg = `Worker: ${process.pid} is running.`;
  console.log(msg);
  logger.app.info(msg);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    logger.app.error(error);
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      logger.app.error(error);
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
